#!/bin/sh
###########################################################################
# main build script for the DAS sub-components.
# - each component is a separate bash function
# - each function will build/compile and install the subparts of the component
#   (see deployment guide for the steps followed).
#
# Note: updates to system files are by *replacing* the system file
#       with the updated version found in config-files/*
#
set -x
export PATH="/usr/local/bin:$PATH"
export PATH="/opt/apache-maven-2.0.11/bin:$PATH"
# export JAVA_HOME=/usr/lib/jvm/java-1.6.0-openjdk.x86_64
export JAVA_HOME=/vagrant/jdk1.6.0_43
export PATH="$JAVA_HOME/bin:$PATH"

###########################################################################
# First Check a bunch of installs are correct for this script (force abort)

hash java 2>/dev/null || { echo >&2 "java is required.  Aborting."; exit 1; }
hash pip2.7 2>/dev/null || { echo >&2 "pip2.7 is required.  Aborting."; exit 1; }
hash python2.7 2>/dev/null || { echo >&2 "python2.7 is required.  Aborting."; exit 1; }
hash mvn 2>/dev/null || { echo >&2 "maven is required.  Aborting."; exit 1; }

###########################################################################
# -N option should mean timestamps are checked so download only occurs
# when file is out-of-date (so only once rather than each time)
#
wget_N() { # url
    wget -N $1
}

###########################################################################
# Main installs for the scoreboard/plone componentes (python27 based)

install_scoreboard() {
    export PATH="/usr/local/bin:$PATH"    
    curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python2.7 -
    pip install virtualenv
    pip install setuptools --upgrade

    adduser scoreboard 
    mkdir -p /var/local/plone-scoreboard
    chown scoreboard:scoreboard /var/local/plone-scoreboard -R

    cd /var/local/plone-scoreboard
    git clone https://github.com/eaudeweb/scoreboard.buildout.git scoreboard.buildout
    git clone https://github.com/eaudeweb/scoreboard.buildout.git scoreboard.buildout.test

    echo "############# plone config files"
    chown scoreboard:scoreboard /var/local/plone-scoreboard -R
    cp /vagrant/scripts/plone-scoreboard-base.cfg scoreboard.buildout.test/base.cfg
    cp /vagrant/scripts/plone-versions-4.3.cfg scoreboard.buildout.test/plone-versions-4.3.cfg

    cp /vagrant/scripts/plone-scoreboard-base.cfg scoreboard.buildout/base.cfg
    cp /vagrant/scripts/plone-versions-4.3.cfg scoreboard.buildout/plone-versions-4.3.cfg
    chown scoreboard:scoreboard /var/local/plone-scoreboard -R
    # chown scoreboard:scoreboard /var/local/scoreboard -R

    # Now build the production (using production.cfg)
    echo "***** build scoreboard (production)"
    cd /var/local/plone-scoreboard/scoreboard.buildout
    su -c "/usr/local/bin/virtualenv . ;\
           source bin/activate ; \
           bin/python2.7 bootstrap.py -c production.cfg ; \
           bin/buildout -c production.cfg" scoreboard

    # Recover and setup the datafiles needed.
    mkdir -p var
    cd var
    if ! grep -q www.digital-agenda-data.eu /etc/hosts; then
	wget_N http://digital-agenda-data.eu/download/plone-storage.tar.gz
	gunzip plone-storage.tar.gz
	tar -xf plone-storage.tar
    else
	echo "**** WARNING Could not update datafiles - hosts already redirected"
    fi

    # Now build the test setup (using test.cfg)
    cd /var/local/plone-scoreboard/scoreboard.buildout.test
    su -c "/usr/local/bin/virtualenv . ;\
           source bin/activate ; \
           bin/python2.7 bootstrap.py -c test.cfg ; \
           bin/buildout -c test.cfg" scoreboard

    # Testable by accessing -  http://localhost:8440/Plone
    chown scoreboard:scoreboard /var/local/plone-scoreboard -R
    echo "Update http/service config files for scoreboard"
    
    mkdir -p /usr/local/apache/conf/ssl.crt/
    mkdir -p /usr/local/apache/conf/ssl.key/
    cp /vagrant/server.crt /usr/local/apache/conf/ssl.crt/
    cp /vagrant/server.key /usr/local/apache/conf/ssl.key/
    if [ ! -f  "/usr/local/apache/conf/ssl.crt/server.crt" ]
    then
	echo "ERROR: server certificates not available or need to be created"
	echo "see http://www.akadia.com/services/ssh_test_certificate.html"
	exit -1
    fi
    cp /vagrant/config-files/scoreboard-init /etc/init.d/scoreboard
    cp /vagrant/config-files/ssl.conf /etc/httpd/conf.d/ssl.conf
    cp /vagrant/config-files/scoreboard.conf /etc/httpd/conf.d/ssl-scoreboard.conf
    cp /vagrant/config-files/httpd.conf /etc/httpd/conf/httpd.conf
    rm -rf /var/local/scoreboard /var/local/scoreboardtest /var/www/html/scoreboard /var/www/html/scoreboardtest
    ln -s /var/local/plone-scoreboard/scoreboard.buildout /var/www/html/scoreboard
    ln -s /var/local/plone-scoreboard/scorecoard.buildout.test /var/www/html/scoreboardtest
    chown scoreboard:scoreboard /var/local/scoreboard -R
}

###########################################################################
# 2.1.2.3 (openlink Virtuoso)
install_virtuoso() {
    echo "Installing Virtuoso stable/6 in $WORKDIR"
    cd $WORKDIR
    git clone --branch=stable/6 git://github.com/openlink/virtuoso-opensource.git 
    # Create the two Data Directories
    mkdir -p /var/local/virtuoso/var/lib/virtuoso/ontowiki
    mkdir -p /var/local/virtuoso/var/lib/virtuoso/test
    pushd virtuoso-opensource
     pwd ; ./autogen.sh
     ./configure --prefix=/var/local/virtuoso --with-readline
     make ; make install
     # Everything should be where it is supposed to be - update config files
     cp /vagrant/config-files/virtuoso-init /etc/init.d/virtuoso
     cp /vagrant/config-files/virtuoso-test-init /etc/init.d/virtuosotest
     cp /vagrant/config-files/virtuoso.ini /var/local/virtuoso/var/lib/virtuoso/ontowiki
     cp /vagrant/config-files/virtuosotest.ini /var/local/virtuoso/var/lib/virtuoso/test
     pushd /vagrant
       wget_N http://test.digital-agenda-data.eu/download/virtuoso_copy.db.gz
     popd
     pushd /var/local/virtuoso/var/lib/virtuoso/db/
       # Replace the empty/not yet created db with the copy of the actual database,
       cp /vagrant/virtuoso_copy.db.gz virtuoso.db.gz
       gzip -df virtuoso.db.gz
     popd
    popd
}

###########################################################################
# 2.1.2.4 (Content Repository)

install_cr() {
    export PATH="/opt/apache-maven-2.0.11/bin:$PATH"
    pushd /vagrant
     # Create all the expected directories
     mkdir -p /var/local/cr/build
     mkdir -p /var/local/crtest/build
     mkdir -p /var/local/cr/apphome/staging
     mkdir -p /var/local/cr/apphome/download
     mkdir -p /var/local/cr/apphome/filestore
     mkdir -p /var/local/cr/apphome/tmp
     mkdir -p /var/local/cr/apphome/acl
     # Change the permissions on these directories
     chmod 777 /var/local/cr/apphome/staging /var/local/cr/apphome/download /var/local/cr/apphome/tmp /var/local/cr/apphome/acl

     # Setup tomcat6 in the required directory.
     wget -N http://apache.cu.be/tomcat/tomcat-6/v6.0.44/bin/apache-tomcat-6.0.44.tar.gz
     pushd /var/local/cr
       tar xzvf /vagrant/apache-tomcat-6.0.44.tar.gz
     popd
       
     # Rebuild the system if needed
     pushd /var/local/cr/build/
      if [ ! -d "eionet.contreg" ] 
      then
	 #  git clone --branch=digital-agenda-scoreboard https://github.com/eea/eionet.contreg.git
	 git clone https://github.com/eea/eionet.contreg.git
      fi
     popd
     # copy across a few config files (before building the war)
     cp /vagrant/config-files/eionet.contreg-local.properties /var/local/cr/build/eionet.contreg/local.properties
     cp /vagrant/config-files/cr.groups.xml /var/local/cr/apphome/acl
     pushd /var/local/cr/build/eionet.contreg
      # cp /vagrant/config-files/cr.pom.xml pom.xml
      mvn -Dmaven.test.skip=true clean install
      # zip -d target/cr.war WEB-INF/lib/virtjdbc-4.x.jar
      # cp /var/local/cr/build/eionet.contreg/lib/virtuoso/virtjdbc/5.0/virtjdbc-4.0.jar /usr/share/tomcat6/lib
      # Copy the files to the tomcat webapps directory
      # cp /var/local/cr/build/eionet.contreg/target/cr.war /var/lib/tomcat6/webapps/data.war   
      cp /var/local/cr/build/eionet.contreg/target/cr.war /var/local/cr/apache-tomcat-6.0.44/webapps/data.war
      # Make sure tomcat config updated and permissions allow inspection
      # cp /vagrant/config-files/tomcat6.conf /etc/tomcat6
      cp /vagrant/config-files/tomcat-users.xml /var/local/cr/apache-tomcat-6.0.44/conf
      cp /vagrant/config-files/tomcat-server.xml /var/local/cr/apache-tomcat-6.0.44/conf/server.xml
                                                 
      # cp /vagrant/config-files/tomcat-init.sh /etc/init.d/tomcat6
      # Create the database connection if needed
      if [ ! -f /vagrant/virtuoso_copy.db.gz ]
      then
	 echo "**** WARNING: Rebuilding DB from scratch"
	 pushd sql/virtuoso/install
	   # Assuming virtuoso has been place where needed (and has been started)
	   /var/local/virtuoso/bin/isql localhost:1111 -U dba -P dba < 1_create_users.sql
    	   /var/local/virtuoso/bin/isql localhost:1111 -U dba -P dba < 2_setup_full_text_indexing.sql
	   /var/local/virtuoso/bin/isql localhost:1111 -U dba -P dba < 3_create_schema.sql
           /var/local/virtuoso/bin/isql localhost:1111 -U dba -P dba < 4_enforce_inferene_rules.sql
   	   /var/local/virtuoso/bin/isql localhost:1111 -U dba -P dba < 5_initial_data.sql
	 popd
       fi
      popd
   popd
} 

###########################################################################
# ELDA (1.2.21 vesion used)
install_elda() {
    mkdir -p /var/local/elda
    pushd /var/local/elda
      # Install and update the elda software
      wget_N https://elda.googlecode.com/files/elda-standalone-1.2.21.jar
      jar xf elda-standalone-1.2.21.jar
      chmod 777 logs
      # Update the configuration files
      cp /vagrant/scripts/elda-jetty.xml etc/jetty.xml
      # git clone https://github.com/eaudeweb/scoreboard.elda.git
      # cp /vagrant/config-files/urlrewritefilter-4.0.3.jar webapps/root/WEB-INF/lib
      cp /vagrant/config-files/elda-scoreboard.ttl webapps/elda/specs/scoreboard.ttl
      cp /vagrant/config-files/elda-web.xml webapps/elda/WEB-INF/web.xml
      cp /vagrant/config-files/elda-index.html webapps/elda/WEB-INF/index.html
      cp /vagrant/config-files/elda-E1.2.21-index.html /var/local/elda/webapps/elda/lda-assets/docs/E1.2.21-index.html
      cp /vagrant/config-files/elda-E1.2.19-index.html /var/local/elda/webapps/elda/lda-assets/docs/E1.2.19-index.html
      # 
      cp -r webapps/elda/* webapps/root
    popd
}

###########################################################################
# Install virtuoso first - should be standard enough.

install_virtuoso
service virtuoso start
sleep 10;
set_access_rights
install_scoreboard;
install_cr;
install_elda

echo "Now login with conductor and update cr3user permissions for role - dba rights"
###########################################################################
###########################################################################
